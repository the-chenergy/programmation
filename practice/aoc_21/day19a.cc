#include <bits/stdc++.h>
using namespace std;

#define rep(i, from, to) for (int i = from; i < (to); ++i)
#define all(x) x.begin(), x.end()
#define sz(x) (int)(x).size()
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;

/**
 * Author: Ulf Lundstrom with inspiration from tinyKACTL
 * Date: 2009-04-14
 * License: CC0
 * Source:
 * Description: Class to handle points in 3D space.
 * 	T can be e.g. double or long long.
 * Usage:
 * Status: tested, except for phi and theta
 */
template <class T>
struct Point3D {
    typedef Point3D P;
    typedef const P& R;
    T x, y, z;
    explicit Point3D(T x = 0, T y = 0, T z = 0) : x(x), y(y), z(z) {}
    bool operator<(R p) const {
        return tie(x, y, z) < tie(p.x, p.y, p.z);
    }
    bool operator==(R p) const {
        return tie(x, y, z) == tie(p.x, p.y, p.z);
    }
    P operator+(R p) const { return P(x + p.x, y + p.y, z + p.z); }
    P operator-(R p) const { return P(x - p.x, y - p.y, z - p.z); }
    P operator*(T d) const { return P(x * d, y * d, z * d); }
    P operator/(T d) const { return P(x / d, y / d, z / d); }
    T dot(R p) const { return x * p.x + y * p.y + z * p.z; }
    P cross(R p) const {
        return P(y * p.z - z * p.y, z * p.x - x * p.z, x * p.y - y * p.x);
    }
    T dist2() const { return x * x + y * y + z * z; }
    double dist() const { return sqrt((double)dist2()); }
    // Azimuthal angle (longitude) to x-axis in interval [-pi, pi]
    double phi() const { return atan2(y, x); }
    // Zenith angle (latitude) to the z-axis in interval [0, pi]
    double theta() const { return atan2(sqrt(x * x + y * y), z); }
    P unit() const { return *this / (T)dist(); }  // makes dist()=1
    // returns unit vector normal to *this and p
    P normal(P p) const { return cross(p).unit(); }
    // returns point rotated 'angle' radians ccw around axis
    P rotate(double angle, P axis) const {
        double s = sin(angle), c = cos(angle);
        P u = axis.unit();
        return u * dot(u) * (1 - c) + (*this) * c - cross(u) * s;
    }
};

int main() {
    using P = Point3D<double>;

    vector<vector<array<int, 2>>> R = {{}};
    set<array<int, 3>> RS = {{1, 2, 3}};
    auto rp = [&](P p, vector<array<int, 2>> r, int b = 0) -> P {
        if (b) {
            for (int i = (int)r.size() - 1; i >= 0; --i) {
                auto [x, y] = r[i];
                p = p.rotate(M_PI / 2 * y, P(-(x == 0), -(x == 1), -(x == 2)));
            }
        } else {
            for (auto [x, y] : r) {
                p = p.rotate(M_PI / 2 * y, P(x == 0, x == 1, x == 2));
            }
        }
        return p;
    };
    auto tp = [&](P p) -> array<int, 3> {
        return {int(round(p.x)), int(round(p.y)), int(round(p.z))};
    };
    auto ADD_R = [&](vector<array<int, 2>> r) {
        auto p = tp(rp(P(1, 2, 3), r));
        if (!RS.count(p)) {
            R.push_back(r);
            RS.insert(p);
        }
    };
    for (int i = 0; i < 3; ++i) {
        for (int j = 1; j < 4; ++j) {
            ADD_R({{i, j}});
        }
    }
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (j == i) {
                continue;
            }
            for (int k = 1; k < 4; ++k) {
                for (int l = 1; l < 4; ++l) {
                    ADD_R({{i, k}, {j, l}});
                }
            }
        }
    }

    vector<vector<P>> g = {
        {
            P(878, -830, -633),
            P(-654, 579, 583),
            P(-297, 520, -671),
            P(-288, 418, -607),
            P(927, -707, -599),
            P(834, -770, 492),
            P(65, -56, 25),
            P(662, 392, -584),
            P(-635, 672, 759),
            P(-286, -837, -550),
            P(943, -732, -680),
            P(868, -851, 577),
            P(845, -735, 422),
            P(757, 441, -546),
            P(417, 377, 639),
            P(-422, -920, -556),
            P(-379, 503, -529),
            P(-358, -887, -535),
            P(-557, 695, 590),
            P(-469, -715, 623),
            P(421, 350, 460),
            P(727, 244, -543),
            P(-524, -657, 716),
            P(530, 386, 541),
            P(-516, -654, 485),
        },
        {
            P(-576, 568, -812),
            P(657, 415, -415),
            P(697, -697, -764),
            P(-768, -701, -757),
            P(133, 21, 23),
            P(660, -634, -685),
            P(531, 764, 612),
            P(-693, -514, 675),
            P(625, 435, -393),
            P(-505, 429, -811),
            P(-732, -827, -754),
            P(-751, -553, 759),
            P(585, 424, -332),
            P(406, 869, 566),
            P(-345, 414, 781),
            P(-452, 446, -773),
            P(437, 881, 577),
            P(-667, -527, 862),
            P(592, -509, 865),
            P(572, -544, 667),
            P(796, -712, -731),
            P(-466, 394, 764),
            P(-793, -859, -721),
            P(-424, 469, 687),
            P(546, -522, 796),
        },
        {
            P(496, 419, 871),
            P(517, -648, -341),
            P(-373, -342, 699),
            P(610, -470, 865),
            P(-405, 433, -478),
            P(635, -489, 683),
            P(591, -554, -342),
            P(-523, 457, -377),
            P(480, 382, 833),
            P(-383, 339, 809),
            P(796, 849, -470),
            P(576, -541, -376),
            P(-529, 382, 821),
            P(-359, -444, 565),
            P(-657, -489, -782),
            P(-660, 462, -493),
            P(-701, -484, -738),
            P(-444, 333, 689),
            P(736, 800, -551),
            P(440, 430, 856),
            P(-749, -542, -720),
            P(628, 771, -522),
            P(-84, 45, 31),
            P(-354, -473, 697),
            P(655, -447, 812),
        },
        {
            P(-585, -799, -407),
            P(-8, 3, -15),
            P(-352, 263, -798),
            P(648, -897, -545),
            P(807, 594, 858),
            P(949, 398, -473),
            P(-550, 462, 970),
            P(939, -728, 848),
            P(923, 450, -605),
            P(-370, -983, 687),
            P(-320, -899, 708),
            P(-678, -623, -426),
            P(-701, -792, -504),
            P(134, -80, 61),
            P(-425, 479, 834),
            P(651, -666, -537),
            P(906, -869, 727),
            P(906, 647, 784),
            P(-301, 457, 941),
            P(709, -759, -592),
            P(-338, -971, 589),
            P(-326, 308, -768),
            P(-271, 271, -719),
            P(957, -780, 619),
            P(905, 310, -592),
            P(902, 471, 898),
        },
        {
            P(-344, -650, 707),
            P(-19, -55, -144),
            P(-475, 295, 231),
            P(-790, 471, -694),
            P(634, 400, -574),
            P(-387, -696, 643),
            P(526, -976, -868),
            P(737, -562, 293),
            P(-362, -790, -599),
            P(649, 528, 271),
            P(783, 305, -610),
            P(-348, -610, 641),
            P(827, 579, 241),
            P(649, -550, 431),
            P(20, -194, -1),
            P(-548, 230, 315),
            P(726, 671, 262),
            P(-513, 246, 239),
            P(699, -549, 494),
            P(601, -874, -967),
            P(621, 381, -566),
            P(600, -977, -919),
            P(-756, 576, -753),
            P(-389, -745, -695),
            P(-411, -777, -544),
            P(-712, 472, -707),
        },
        {
            P(-736, -631, 547),
            P(489, 543, -764),
            P(-658, -613, 524),
            P(-765, 344, 314),
            P(474, -482, 585),
            P(-588, 530, -365),
            P(-589, 305, -401),
            P(443, 401, 516),
            P(376, -573, 506),
            P(594, 481, -777),
            P(-688, -591, 744),
            P(-519, 362, -375),
            P(-728, 347, 358),
            P(442, -612, 670),
            P(-657, 447, 279),
            P(434, -736, -722),
            P(645, 623, -783),
            P(-13, -133, -116),
            P(-758, -472, -812),
            P(-651, -534, -759),
            P(-805, -505, -654),
            P(418, -677, -730),
            P(407, 437, 584),
            P(-149, -18, 22),
            P(485, -643, -827),
            P(272, 461, 520),
        },
        {
            P(457, -689, -751),
            P(394, -366, 777),
            P(7, -79, -26),
            P(-346, -410, -447),
            P(492, 343, 394),
            P(64, 50, 92),
            P(-432, 487, 345),
            P(328, -665, -703),
            P(329, -753, -802),
            P(-568, -783, 674),
            P(-347, 611, -432),
            P(-361, 477, -330),
            P(508, 305, 431),
            P(-628, -604, 616),
            P(-504, -588, 665),
            P(452, 320, 442),
            P(-425, -374, -325),
            P(667, 364, -435),
            P(-465, -527, -427),
            P(647, 493, -477),
            P(391, -438, 763),
            P(-517, 355, 394),
            P(345, -455, 661),
            P(-371, 367, 351),
            P(622, 311, -458),
            P(-342, 479, -461),
        },
        {
            P(240, -368, 494),
            P(553, 641, -895),
            P(-844, -774, 775),
            P(-158, 152, 27),
            P(604, 463, -925),
            P(-808, -665, 694),
            P(257, 746, 637),
            P(-582, 876, 794),
            P(-564, 874, 680),
            P(295, -496, 433),
            P(502, -255, -850),
            P(-524, 591, -672),
            P(336, -262, -791),
            P(-887, -673, -732),
            P(496, -283, -694),
            P(276, 755, 723),
            P(233, 780, 826),
            P(-537, 896, 707),
            P(-16, -5, -83),
            P(-869, -640, -763),
            P(292, -328, 445),
            P(-525, 641, -735),
            P(-817, -778, 596),
            P(-959, -707, -833),
            P(-537, 553, -873),
            P(696, 564, -904),
        },
        {
            P(-138, -81, -56),
            P(441, 422, -748),
            P(-613, -753, -567),
            P(-711, -766, -679),
            P(471, 430, 517),
            P(469, -785, 640),
            P(-736, -746, -682),
            P(-467, 333, -521),
            P(-837, 485, 476),
            P(574, -437, -615),
            P(-838, -845, 533),
            P(436, 232, 537),
            P(454, 235, -722),
            P(630, -503, -471),
            P(-869, -867, 440),
            P(-875, -814, 670),
            P(449, 301, 491),
            P(-942, 531, 351),
            P(-487, 316, -400),
            P(477, -764, 674),
            P(480, 338, -806),
            P(569, -466, -398),
            P(-954, 520, 382),
            P(-542, 410, -479),
            P(539, -822, 685),
        },
        {
            P(467, -625, -603),
            P(-669, 564, -709),
            P(-847, -826, -623),
            P(652, -665, 691),
            P(-836, -756, -658),
            P(555, -658, 807),
            P(-738, 641, -734),
            P(-640, 530, -730),
            P(-532, -707, 498),
            P(467, 444, -799),
            P(261, 397, 458),
            P(-419, -609, 489),
            P(-490, 820, 347),
            P(522, -532, -545),
            P(454, 584, -817),
            P(-557, 750, 437),
            P(586, 532, -843),
            P(-870, -671, -739),
            P(514, -763, -542),
            P(-524, 719, 419),
            P(-98, 20, 18),
            P(-423, -788, 462),
            P(340, 405, 377),
            P(291, 442, 432),
            P(633, -489, 784),
        },
        {
            P(716, -305, -787),
            P(837, -330, -928),
            P(888, -497, 410),
            P(-835, -736, -589),
            P(-726, 396, -816),
            P(105, 27, -108),
            P(-269, 644, 397),
            P(-783, -776, -540),
            P(-719, 467, -739),
            P(-739, -842, 696),
            P(-8, -46, 23),
            P(683, 628, -464),
            P(-579, -821, 599),
            P(-354, 666, 310),
            P(393, 435, 700),
            P(912, -501, 603),
            P(714, 514, -397),
            P(810, -320, -849),
            P(487, 494, 578),
            P(-339, 704, 339),
            P(895, -524, 455),
            P(-704, 404, -846),
            P(424, 551, 688),
            P(-780, -608, -528),
            P(692, 689, -364),
            P(-573, -849, 755),
        },
        {
            P(-324, 527, 757),
            P(608, -702, -558),
            P(429, 818, 379),
            P(582, -495, 715),
            P(-341, 737, -607),
            P(-796, -621, 820),
            P(-880, -642, 770),
            P(-868, -740, 802),
            P(597, -658, -369),
            P(-453, 503, 805),
            P(572, 409, -620),
            P(560, -388, 839),
            P(565, -359, 590),
            P(-483, -797, -347),
            P(536, -739, -501),
            P(-390, 826, -723),
            P(-387, 754, -709),
            P(508, 604, -611),
            P(-41, -143, 24),
            P(-418, -868, -393),
            P(-325, 439, 856),
            P(36, 43, -57),
            P(469, 665, 481),
            P(350, 782, 501),
            P(-394, -779, -323),
            P(632, 588, -562),
        },
        {
            P(-866, -426, -688),
            P(486, -659, 807),
            P(-935, -385, -780),
            P(-686, -505, 394),
            P(662, -480, -583),
            P(816, 333, 564),
            P(534, 365, -598),
            P(-696, 619, 400),
            P(767, 325, 526),
            P(-694, 783, 523),
            P(757, -516, -732),
            P(391, 356, -675),
            P(-924, -312, -703),
            P(-50, 27, 6),
            P(591, -600, 841),
            P(590, -613, 763),
            P(-723, -341, 410),
            P(483, 335, -776),
            P(-424, 345, -345),
            P(-685, 728, 577),
            P(681, -472, -570),
            P(-557, -447, 419),
            P(832, 409, 599),
            P(-370, 343, -406),
            P(-382, 333, -397),
        },
        {
            P(-578, -856, 613),
            P(-609, -874, 646),
            P(744, -939, -717),
            P(473, -481, 439),
            P(-508, -946, 680),
            P(792, -836, -716),
            P(391, 419, -696),
            P(-38, -154, -175),
            P(499, -592, 313),
            P(-550, 349, 235),
            P(-491, 515, 228),
            P(-416, 617, -490),
            P(382, 488, 294),
            P(399, 438, -683),
            P(-437, 709, -591),
            P(435, 343, -534),
            P(-105, -7, -65),
            P(475, 517, 354),
            P(-647, 509, 256),
            P(-606, -512, -668),
            P(-669, -511, -618),
            P(362, 514, 220),
            P(693, -938, -791),
            P(-446, 566, -668),
            P(-468, -524, -580),
            P(556, -552, 297),
        },
        {
            P(-757, 815, 582),
            P(-2, 58, 9),
            P(-515, -401, 595),
            P(-371, 445, -483),
            P(637, 752, -662),
            P(8, -94, -131),
            P(723, -646, -779),
            P(-582, 817, 681),
            P(655, 514, 402),
            P(-453, -455, 594),
            P(-442, -349, 665),
            P(-521, -349, -553),
            P(-393, 472, -510),
            P(-487, -325, -364),
            P(616, 678, 468),
            P(615, 532, -632),
            P(746, 593, 500),
            P(-391, 490, -396),
            P(585, -819, 511),
            P(597, 555, -710),
            P(-512, -368, -467),
            P(492, -714, 460),
            P(551, -722, 444),
            P(756, -804, -732),
            P(-696, 826, 735),
            P(694, -751, -625),
        },
        {
            P(-643, 847, -354),
            P(-766, 752, -394),
            P(757, 394, 440),
            P(799, -393, -663),
            P(-538, -714, 742),
            P(-634, -605, -282),
            P(-165, 88, -1),
            P(-819, 851, -468),
            P(-629, -356, -311),
            P(727, -375, -544),
            P(256, -339, 516),
            P(-419, -694, 859),
            P(749, 586, 347),
            P(811, -425, -565),
            P(-498, -816, 895),
            P(255, -438, 604),
            P(697, 851, -525),
            P(556, 884, -404),
            P(788, 442, 416),
            P(-651, -480, -418),
            P(-923, 489, 752),
            P(-970, 419, 912),
            P(608, 902, -633),
            P(-894, 449, 783),
            P(-49, -39, 90),
            P(384, -390, 580),
        },
        {
            P(469, -678, 693),
            P(-644, -431, 470),
            P(-57, -144, 57),
            P(392, 324, 928),
            P(553, 371, -753),
            P(-875, -821, -277),
            P(432, -606, 750),
            P(-621, 243, -576),
            P(-606, -460, 455),
            P(-906, 725, 820),
            P(-682, 343, -567),
            P(-759, -809, -308),
            P(481, -761, -382),
            P(382, -776, -415),
            P(-816, -699, -371),
            P(-914, 695, 842),
            P(593, 360, -814),
            P(374, 413, 904),
            P(-159, -10, 163),
            P(-796, 276, -598),
            P(-666, -518, 385),
            P(513, -667, 882),
            P(303, 348, 858),
            P(518, -698, -461),
            P(-843, 618, 835),
            P(521, 351, -731),
        },
        {
            P(353, 635, -713),
            P(-771, -279, 699),
            P(-474, 769, 499),
            P(-701, 714, -588),
            P(-643, -334, 760),
            P(-361, 778, 597),
            P(-305, -533, -323),
            P(-323, -424, -408),
            P(432, -395, 549),
            P(-74, 22, -27),
            P(691, 483, 717),
            P(-811, -331, 748),
            P(708, -667, -556),
            P(-671, 911, -585),
            P(369, -410, 442),
            P(361, -388, 472),
            P(-606, 763, -626),
            P(-365, 805, 418),
            P(710, 576, 541),
            P(435, 652, -571),
            P(-385, -573, -325),
            P(344, 737, -649),
            P(682, -849, -596),
            P(739, -711, -666),
            P(613, 460, 548),
        },
        {
            P(630, -778, -377),
            P(-642, 806, -657),
            P(404, 849, -563),
            P(-504, -789, -498),
            P(-659, 778, -635),
            P(34, -62, 148),
            P(347, -484, 785),
            P(-420, 405, 665),
            P(-457, 478, 604),
            P(384, 813, 754),
            P(-718, -667, 757),
            P(468, 755, 793),
            P(263, 852, -712),
            P(-776, -678, 695),
            P(653, -822, -405),
            P(476, -510, 763),
            P(-608, -880, -588),
            P(256, 827, -572),
            P(278, -530, 798),
            P(-133, 7, 20),
            P(-451, -884, -500),
            P(-739, -633, 765),
            P(-391, 622, 660),
            P(-640, 591, -646),
            P(281, 729, 780),
            P(520, -823, -410),
        },
        {
            P(-957, 587, 417),
            P(711, -510, -899),
            P(-500, 835, -796),
            P(348, 583, -720),
            P(778, 798, 343),
            P(464, 486, -727),
            P(-414, -471, -425),
            P(499, -891, 534),
            P(679, -608, -911),
            P(-25, -50, -79),
            P(723, 847, 380),
            P(-872, 565, 330),
            P(729, -629, -827),
            P(-438, -453, -514),
            P(-484, -382, -449),
            P(-522, 827, -826),
            P(-507, 764, -719),
            P(-146, 50, 47),
            P(-592, -511, 505),
            P(371, 505, -551),
            P(697, 877, 335),
            P(-887, 527, 359),
            P(-649, -548, 577),
            P(-460, -592, 566),
            P(748, -862, 529),
            P(624, -755, 551),
        },
        {
            P(-970, -446, -402),
            P(660, -629, -380),
            P(598, -630, -326),
            P(-988, -361, -511),
            P(417, -770, 901),
            P(601, 432, -293),
            P(-622, -623, 933),
            P(-592, -626, 736),
            P(-908, -363, -551),
            P(-932, 559, 800),
            P(592, 518, -274),
            P(-138, 98, 149),
            P(-144, -53, -3),
            P(-687, -664, 785),
            P(722, 361, 565),
            P(626, 329, -250),
            P(-650, 722, -312),
            P(-522, 661, -257),
            P(356, -617, 890),
            P(-819, 461, 791),
            P(531, -716, 892),
            P(671, -700, -274),
            P(720, 475, 547),
            P(742, 448, 520),
            P(-928, 380, 827),
            P(-482, 710, -309),
        },
        {
            P(-877, 509, -750),
            P(-613, -482, 651),
            P(442, -680, -742),
            P(361, 600, 630),
            P(-67, 40, 98),
            P(-831, 444, -821),
            P(-901, 420, -732),
            P(841, 456, -531),
            P(-662, -606, 635),
            P(758, 447, -603),
            P(416, -669, 822),
            P(400, 478, 506),
            P(419, -795, 786),
            P(362, 461, 559),
            P(-617, 367, 784),
            P(452, -827, 847),
            P(-666, -582, -655),
            P(-515, 413, 801),
            P(57, 6, -81),
            P(488, -602, -606),
            P(-855, -571, -611),
            P(-501, 416, 873),
            P(-604, -546, 456),
            P(780, 467, -571),
            P(409, -665, -643),
            P(-723, -510, -692),
        },
        {
            P(-11, -95, -104),
            P(-767, -537, -778),
            P(-624, 512, -512),
            P(877, 487, -759),
            P(-686, 495, 624),
            P(595, -590, 329),
            P(-607, 370, -430),
            P(-837, -531, -869),
            P(609, -637, 320),
            P(-709, 434, -421),
            P(551, -611, -783),
            P(602, -649, 242),
            P(695, 527, -785),
            P(-400, -664, 553),
            P(-883, 498, 594),
            P(739, 417, -816),
            P(-517, -652, 414),
            P(-735, 457, 529),
            P(688, -605, -694),
            P(561, 760, 228),
            P(-841, -389, -778),
            P(-389, -727, 337),
            P(601, 758, 308),
            P(671, -574, -878),
            P(452, 675, 246),
        },
        {
            P(843, 466, -900),
            P(825, -466, 237),
            P(-918, -519, -987),
            P(823, -405, 291),
            P(835, 504, -949),
            P(833, -836, -616),
            P(835, -457, 249),
            P(-59, -106, -149),
            P(-710, 351, 663),
            P(-729, -553, -963),
            P(385, 463, 561),
            P(549, 340, 563),
            P(-815, -544, -944),
            P(-503, 691, -666),
            P(-732, 450, 730),
            P(-539, -683, 472),
            P(812, -735, -524),
            P(803, -658, -667),
            P(759, 539, -965),
            P(-546, -553, 598),
            P(-619, -530, 502),
            P(-657, 662, -561),
            P(-626, 394, 776),
            P(440, 517, 552),
            P(-550, 724, -508),
        },
        {
            P(-80, -88, -25),
            P(-862, -445, -663),
            P(803, -429, -392),
            P(396, 465, -685),
            P(-847, -416, -625),
            P(833, -844, 438),
            P(682, 683, 480),
            P(-421, 422, 649),
            P(-462, -802, 883),
            P(46, 30, 75),
            P(-418, 434, 817),
            P(-628, -861, 890),
            P(-366, 483, 777),
            P(373, 634, -607),
            P(743, -774, 505),
            P(748, -466, -343),
            P(-482, 633, -426),
            P(722, -421, -313),
            P(718, 764, 371),
            P(691, 585, 367),
            P(-497, 740, -363),
            P(-475, 710, -355),
            P(761, -743, 472),
            P(-622, -705, 862),
            P(489, 641, -704),
            P(-932, -503, -603),
        },
        {
            P(-711, -795, 292),
            P(820, 713, -588),
            P(682, 725, -676),
            P(780, 291, 672),
            P(-448, -881, -583),
            P(524, -765, 493),
            P(-489, -819, -650),
            P(710, 381, 605),
            P(494, -400, -461),
            P(-423, -863, -611),
            P(-828, 406, 739),
            P(-796, -714, 326),
            P(-649, 433, 743),
            P(-733, 686, -909),
            P(-866, -679, 315),
            P(-760, 713, -931),
            P(-847, 668, -911),
            P(-747, 442, 630),
            P(425, -473, -488),
            P(490, -786, 522),
            P(679, 363, 638),
            P(601, -790, 424),
            P(573, -463, -414),
            P(619, 726, -626),
            P(-3, -97, -140),
        },
    };
    if (0) {
        g = {
            {
                P(404, -588, -901),
                P(528, -643, 409),
                P(-838, 591, 734),
                P(390, -675, -793),
                P(-537, -823, -458),
                P(-485, -357, 347),
                P(-345, -311, 381),
                P(-661, -816, -575),
                P(-876, 649, 763),
                P(-618, -824, -621),
                P(553, 345, -567),
                P(474, 580, 667),
                P(-447, -329, 318),
                P(-584, 868, -557),
                P(544, -627, -890),
                P(564, 392, -477),
                P(455, 729, 728),
                P(-892, 524, 684),
                P(-689, 845, -530),
                P(423, -701, 434),
                P(7, -33, -71),
                P(630, 319, -379),
                P(443, 580, 662),
                P(-789, 900, -551),
                P(459, -707, 401),
            },
            {
                P(686, 422, 578),
                P(605, 423, 415),
                P(515, 917, -361),
                P(-336, 658, 858),
                P(95, 138, 22),
                P(-476, 619, 847),
                P(-340, -569, -846),
                P(567, -361, 727),
                P(-460, 603, -452),
                P(669, -402, 600),
                P(729, 430, 532),
                P(-500, -761, 534),
                P(-322, 571, 750),
                P(-466, -666, -811),
                P(-429, -592, 574),
                P(-355, 545, -477),
                P(703, -491, -529),
                P(-328, -685, 520),
                P(413, 935, -424),
                P(-391, 539, -444),
                P(586, -435, 557),
                P(-364, -763, -893),
                P(807, -499, -711),
                P(755, -354, -619),
                P(553, 889, -390),
            },
            {
                P(649, 640, 665),
                P(682, -795, 504),
                P(-784, 533, -524),
                P(-644, 584, -595),
                P(-588, -843, 648),
                P(-30, 6, 44),
                P(-674, 560, 763),
                P(500, 723, -460),
                P(609, 671, -379),
                P(-555, -800, 653),
                P(-675, -892, -343),
                P(697, -426, -610),
                P(578, 704, 681),
                P(493, 664, -388),
                P(-671, -858, 530),
                P(-667, 343, 800),
                P(571, -461, -707),
                P(-138, -166, 112),
                P(-889, 563, -600),
                P(646, -828, 498),
                P(640, 759, 510),
                P(-630, 509, 768),
                P(-681, -892, -333),
                P(673, -379, -804),
                P(-742, -814, -386),
                P(577, -820, 562),
            },
            {
                P(-589, 542, 597),
                P(605, -692, 669),
                P(-500, 565, -823),
                P(-660, 373, 557),
                P(-458, -679, -417),
                P(-488, 449, 543),
                P(-626, 468, -788),
                P(338, -750, -386),
                P(528, -832, -391),
                P(562, -778, 733),
                P(-938, -730, 414),
                P(543, 643, -506),
                P(-524, 371, -870),
                P(407, 773, 750),
                P(-104, 29, 83),
                P(378, -903, -323),
                P(-778, -728, 485),
                P(426, 699, 580),
                P(-438, -605, -362),
                P(-469, -447, -387),
                P(509, 732, 623),
                P(647, 635, -688),
                P(-868, -804, 481),
                P(614, -800, 639),
                P(595, 780, -596),
            },
            {
                P(727, 592, 562),
                P(-293, -554, 779),
                P(441, 611, -461),
                P(-714, 465, -776),
                P(-743, 427, -804),
                P(-660, -479, -426),
                P(832, -632, 460),
                P(927, -485, -438),
                P(408, 393, -506),
                P(466, 436, -512),
                P(110, 16, 151),
                P(-258, -428, 682),
                P(-393, 719, 612),
                P(-211, -452, 876),
                P(808, -476, -593),
                P(-575, 615, 604),
                P(-485, 667, 467),
                P(-680, 325, -822),
                P(-627, -443, -432),
                P(872, -547, -609),
                P(833, 512, 582),
                P(807, 604, 487),
                P(839, -516, 451),
                P(891, -625, 532),
                P(-652, -548, -490),
                P(30, -46, -14),
            },
        };
    }

    int n = (int)g.size();
    vector<vector<tuple<int, P, int, int>>> h(n);
    for (int i = 0; i < n; ++i) {
        auto a = g[i];
        for (int j = 0; j < n; ++j) {
            if (j == i) {
                continue;
            }
            [&] {
                for (int r = 0; r < 24; ++r) {
                    vector<P> b;
                    for (auto p : g[j]) {
                        b.push_back(rp(p, R[r]));
                    }
                    for (int k = 0; k < (int)b.size(); ++k) {
                        for (int m = 0; m < (int)a.size(); ++m) {
                            int c = 0;
                            for (int l = 0; l < (int)b.size(); ++l) {
                                P db = b[l] - b[k];
                                for (int mm = 0; mm < (int)a.size(); ++mm) {
                                    P da = a[mm] - a[m];
                                    if ((da - db).dist2() < 1E-7) {
                                        ++c;
                                        if (c == 11) {
                                            P p = a[m], q = b[k], d = p - q;
                                            auto d2 = rp(P() - d, R[r], 0);
                                            h[i].push_back({j, d, r, 0});
                                            // h[j].push_back({i, d2, r, 1});
                                            println("i={} j={} d=({}, {}, {}) r={} b={}", i, j, tp(d)[0], tp(d)[1], tp(d)[2], r, 0);
                                            // println("i={} j={} d=({}, {}, {}) r={} b={}", j, i, tp(d2)[0], tp(d2)[1], tp(d2)[2], r, 1);
                                            return;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }();
        }
    }
    srand(42);
    for (auto&& H : h) {
        random_shuffle(H.begin(), H.end());
    }

    set<array<int, 3>> s;
    [&] {
        vector<int> b(n, 0);
        auto f = [&](auto&& f, int i, P d, deque<array<int, 2>> r) {
            if (b[i]) {
                return;
            }
            println("Scanner {} is at ({}, {}, {})", i, tp(d)[0], tp(d)[1], tp(d)[2]);
            b[i] = 1;
            for (auto p : g[i]) {
                for (auto [x, y] : r) {
                    p = rp(p, R[x], y);
                }
                s.insert(tp(d + p));
            }
            for (auto [j, p, nr, nb] : h[i]) {
                for (auto [x, y] : r) {
                    p = rp(p, R[x], y);
                }
                auto r2 = r;
                r2.push_front({nr, nb});
                println("\tGoing from scanner {} to scanner {}, moving ({}, {}, {}) and turning <{}, {}>", i, j, tp(p)[0], tp(p)[1], tp(p)[2], nr, nb);
                f(f, j, d + p, r2);
            }
        };
        f(f, 0, P(), {});
    }();
    // for (auto p : s) {
    //     for (auto x : p) {
    //         cout << x << " ";
    //     }
    //     cout << "\n";
    // }
    cout << s.size() << "\n";
}

/*
Too high:
450
*/
